{"version":3,"sources":["usuariosRutas.js"],"names":["router","get","req","res","cookie","expires","Date","clearCookie","status","json","respuesta","cookies","token","mensajeUsuario","error","message","send","post","body","User","find","usuarios","length","findById","params","id","usuario","findByIdAndDelete","put","findByIdAndUpdate","runValidators"],"mappings":"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","sourcesContent":["import { Router } from \"express\"; \r\nimport { register, login } from \"../db/usuariosBD.js\";\r\nimport { usuarioAutorizado, adminAutorizado } from \"../middlewares/funcionesPassword.js\";\r\nimport User from \"../models/usuarioModelo.js\";\r\nimport { mensajes } from \"../libs/manejoErrores.js\";\r\n\r\nconst router = Router();\r\n\r\n// Cerrar sesión\r\nrouter.get(\"/salir\", async (req, res) => {\r\n    res.cookie('token', '', { expires: new Date(0) }).clearCookie('token').status(200).json(\"Cerrado sesión correctamente\");\r\n});\r\n\r\n// Verificar autorización de usuario\r\nrouter.get(\"/usuarios\", async (req, res) => {\r\n    try {\r\n        const respuesta = usuarioAutorizado(req.cookies.token, req);\r\n        res.status(respuesta.status).json(respuesta.mensajeUsuario);\r\n    } catch (error) {\r\n        res.status(500).json(mensajes(500, \"Error al verificar usuario\", error.message));\r\n    }\r\n});\r\n\r\n// Verificar si el usuario es administrador\r\nrouter.get(\"/administradores\", async (req, res) => {\r\n    try {\r\n        const respuesta = await adminAutorizado(req);\r\n        res.status(respuesta.status).json(respuesta);\r\n    } catch (error) {\r\n        res.status(500).json(mensajes(500, \"Error al verificar administrador\", error.message));\r\n    }\r\n});\r\n\r\n// Ruta de prueba\r\nrouter.get(\"/todos\", async (req, res) => {\r\n    res.send(\"Estas en todos\");\r\n});\r\n\r\n// Registro de usuario\r\nrouter.post(\"/registro\", async (req, res) => {\r\n    try {\r\n        const respuesta = await register(req.body);\r\n        if (respuesta.status === 200) {\r\n            res.cookie('token', respuesta.token).status(respuesta.status).json(respuesta.mensajeUsuario);\r\n        } else {\r\n            res.status(respuesta.status).json(respuesta);\r\n        }\r\n    } catch (error) {\r\n        res.status(500).json(mensajes(500, \"Error en el registro\", error.message));\r\n    }\r\n});\r\n\r\n// Inicio de sesión\r\nrouter.post(\"/login\", async (req, res) => {\r\n    try {\r\n        const respuesta = await login(req.body);\r\n        res.status(respuesta.status).json(respuesta);\r\n    } catch (error) {\r\n        res.status(500).json(mensajes(500, \"Error en el inicio de sesión\", error.message));\r\n    }\r\n});\r\n\r\n// Obtener todos los usuarios\r\nrouter.get(\"/usuarios\", async (req, res) => {\r\n    try {\r\n        const usuarios = await User.find();\r\n        res.status(usuarios.length ? 200 : 404).json(usuarios.length ? usuarios : mensajes(404, \"No hay usuarios disponibles\"));\r\n    } catch (error) {\r\n        res.status(500).json(mensajes(500, \"Error al obtener usuarios\", error.message));\r\n    }\r\n});\r\n\r\n// Obtener usuario por ID\r\nrouter.get(\"/usuarios/:id\", async (req, res) => {\r\n    try {\r\n        const usuario = await User.findById(req.params.id);\r\n        if (!usuario) return res.status(404).json(mensajes(404, \"Usuario no encontrado\"));\r\n        res.status(200).json(usuario);\r\n    } catch (error) {\r\n        res.status(500).json(mensajes(500, \"Error al obtener el usuario\", error.message));\r\n    }\r\n});\r\n\r\n// Borrar usuario por ID\r\nrouter.delete(\"/usuarios/:id\", async (req, res) => {\r\n    try {\r\n        const usuario = await User.findByIdAndDelete(req.params.id);\r\n        if (!usuario) return res.status(404).json(mensajes(404, \"Usuario no encontrado\"));\r\n        res.status(200).json(mensajes(200, \"Usuario borrado correctamente\"));\r\n    } catch (error) {\r\n        res.status(500).json(mensajes(500, \"Error al borrar el usuario\", error.message));\r\n    }\r\n});\r\n\r\n// Actualizar usuario por ID\r\nrouter.put(\"/usuarios/:id\", async (req, res) => {\r\n    try {\r\n        const usuario = await User.findByIdAndUpdate(req.params.id, req.body, { new: true, runValidators: true });\r\n        if (!usuario) return res.status(404).json(mensajes(404, \"Usuario no encontrado\"));\r\n        res.status(200).json(mensajes(200, \"Usuario actualizado correctamente\", usuario));\r\n    } catch (error) {\r\n        res.status(500).json(mensajes(500, \"Error al actualizar el usuario\", error.message));\r\n    }\r\n});\r\n\r\nexport default router;\r\n"],"file":"usuariosRutas.dev.js"}