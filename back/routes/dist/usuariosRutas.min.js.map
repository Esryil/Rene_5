{"version":3,"sources":["usuariosRutas.js"],"names":["_express","require","_usuariosBD","_funcionesPassword","_usuarioModelo","_interopRequireDefault","_manejoErrores","router","Router","get","req","res","regeneratorRuntime","async","_context","prev","next","cookie","expires","Date","clearCookie","status","json","stop","respuesta","_context2","usuarioAutorizado","cookies","token","mensajeUsuario","error","mensajes","message","_context3","awrap","adminAutorizado","sent","t0","_context4","send","post","_context5","register","body","_context6","login","usuarios","_context7","User","find","length","usuario","_context8","findById","params","id","abrupt","_context9","findByIdAndDelete","put","_context10","findByIdAndUpdate","new","runValidators"],"mappings":"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","file":"usuariosRutas.min.js","sourcesContent":["import { Router } from \"express\"; \r\nimport { register, login } from \"../db/usuariosBD.js\";\r\nimport { usuarioAutorizado, adminAutorizado } from \"../middlewares/funcionesPassword.js\";\r\nimport User from \"../models/usuarioModelo.js\";\r\nimport { mensajes } from \"../libs/manejoErrores.js\";\r\n\r\nconst router = Router();\r\n\r\n// Cerrar sesión\r\nrouter.get(\"/salir\", async (req, res) => {\r\n    res.cookie('token', '', { expires: new Date(0) }).clearCookie('token').status(200).json(\"Cerrado sesión correctamente\");\r\n});\r\n\r\n// Verificar autorización de usuario\r\nrouter.get(\"/usuarios\", async (req, res) => {\r\n    try {\r\n        const respuesta = usuarioAutorizado(req.cookies.token, req);\r\n        res.status(respuesta.status).json(respuesta.mensajeUsuario);\r\n    } catch (error) {\r\n        res.status(500).json(mensajes(500, \"Error al verificar usuario\", error.message));\r\n    }\r\n});\r\n\r\n// Verificar si el usuario es administrador\r\nrouter.get(\"/administradores\", async (req, res) => {\r\n    try {\r\n        const respuesta = await adminAutorizado(req);\r\n        res.status(respuesta.status).json(respuesta);\r\n    } catch (error) {\r\n        res.status(500).json(mensajes(500, \"Error al verificar administrador\", error.message));\r\n    }\r\n});\r\n\r\n// Ruta de prueba\r\nrouter.get(\"/todos\", async (req, res) => {\r\n    res.send(\"Estas en todos\");\r\n});\r\n\r\n// Registro de usuario\r\nrouter.post(\"/registro\", async (req, res) => {\r\n    try {\r\n        const respuesta = await register(req.body);\r\n        if (respuesta.status === 200) {\r\n            res.cookie('token', respuesta.token).status(respuesta.status).json(respuesta.mensajeUsuario);\r\n        } else {\r\n            res.status(respuesta.status).json(respuesta);\r\n        }\r\n    } catch (error) {\r\n        res.status(500).json(mensajes(500, \"Error en el registro\", error.message));\r\n    }\r\n});\r\n\r\n// Inicio de sesión\r\nrouter.post(\"/login\", async (req, res) => {\r\n    try {\r\n        const respuesta = await login(req.body);\r\n        res.status(respuesta.status).json(respuesta);\r\n    } catch (error) {\r\n        res.status(500).json(mensajes(500, \"Error en el inicio de sesión\", error.message));\r\n    }\r\n});\r\n\r\n// Obtener todos los usuarios\r\nrouter.get(\"/usuarios\", async (req, res) => {\r\n    try {\r\n        const usuarios = await User.find();\r\n        res.status(usuarios.length ? 200 : 404).json(usuarios.length ? usuarios : mensajes(404, \"No hay usuarios disponibles\"));\r\n    } catch (error) {\r\n        res.status(500).json(mensajes(500, \"Error al obtener usuarios\", error.message));\r\n    }\r\n});\r\n\r\n// Obtener usuario por ID\r\nrouter.get(\"/usuarios/:id\", async (req, res) => {\r\n    try {\r\n        const usuario = await User.findById(req.params.id);\r\n        if (!usuario) return res.status(404).json(mensajes(404, \"Usuario no encontrado\"));\r\n        res.status(200).json(usuario);\r\n    } catch (error) {\r\n        res.status(500).json(mensajes(500, \"Error al obtener el usuario\", error.message));\r\n    }\r\n});\r\n\r\n// Borrar usuario por ID\r\nrouter.delete(\"/usuarios/:id\", async (req, res) => {\r\n    try {\r\n        const usuario = await User.findByIdAndDelete(req.params.id);\r\n        if (!usuario) return res.status(404).json(mensajes(404, \"Usuario no encontrado\"));\r\n        res.status(200).json(mensajes(200, \"Usuario borrado correctamente\"));\r\n    } catch (error) {\r\n        res.status(500).json(mensajes(500, \"Error al borrar el usuario\", error.message));\r\n    }\r\n});\r\n\r\n// Actualizar usuario por ID\r\nrouter.put(\"/usuarios/:id\", async (req, res) => {\r\n    try {\r\n        const usuario = await User.findByIdAndUpdate(req.params.id, req.body, { new: true, runValidators: true });\r\n        if (!usuario) return res.status(404).json(mensajes(404, \"Usuario no encontrado\"));\r\n        res.status(200).json(mensajes(200, \"Usuario actualizado correctamente\", usuario));\r\n    } catch (error) {\r\n        res.status(500).json(mensajes(500, \"Error al actualizar el usuario\", error.message));\r\n    }\r\n});\r\n\r\nexport default router;\r\n"]}